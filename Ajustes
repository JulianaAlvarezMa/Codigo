Ajustes:

Archivo-> fomrat-table.js

limpiarTabla(idTabla) {
        const $tabla = $(idTabla).DataTable ? $(idTabla).DataTable() : null;

        if ($tabla) {
            $tabla.clear().draw();
        } else {
            $(`${idTabla} tbody`).empty();
        }
    }



Archivo-> events.js (Reemplazar el evento)

$(document).on('change', '#codter', function () {
            const codter = $(this).val(); 
            grupo.FiltrarProductosProveedor(codter);
        });



Archivo-> grupos.js (Reemplazar las funciones)

FiltrarProductosProveedor(codter) {
    this.controler = 'Combos/';
    return this.controlador('BRProductosPorProveedor', { propro_b: codter }, 'GET')
        .then((r) => {
            const { response, data } = r;

            // Construir listado de productos
            this.productos = response
                ? [{ value: '', text: 'Seleccione...' }, ...data.map(item => ({
                    value: item.codigo_producto,
                    text: item.codigo_producto + ' - ' + item.nombre_producto,
                    params: item
                }))] 
                : [{ value: '', text: 'Seleccione...' }];

            const $select = $('#codpro');
            if ($select.length > 0) {
                // Limpiar opciones anteriores
                $select.empty();
                // Cargar nuevas opciones
                this.productos.forEach(opt => {
                    $select.append(`<option value="${opt.value}">${opt.text}</option>`);
                });

                $select.val('');
                $select.trigger('chosen:updated');
            }

            // Limpia la tabla cada vez que cambie de proveedor
            const formatTable = new FormatTable();
            formatTable.limpiarTabla('#datatable-productos'); 
        })
        .catch(() => {
            console.error('Error al obtener los productos');
        });
    }


CalculoGrupos(selector){
            const tabla = $(selector).DataTable();
            const todasFilas = [];
            let errores = [];
            tabla.rows({ page: 'all' }).every(function () {
            const rowNode = $(this.node());
            const filaCompleta = {};

            rowNode.find('td').each(function () {
                const id = $(this).attr('id');
                if (!id) return;
                
                let valor = '';

                const input = $(this).find('input');
                if (input.length > 0) {
                    valor = input.first().val().trim();
                    
                    if (id === 'cantidad') {
                        const cantidad = parseFloat(valor.replace(/\./g, '').replace(',', '.'));
                        if (isNaN(cantidad) || cantidad <= 0) {
                            const cod = rowNode.find('#producto').text().trim() || 'Producto sin código';
                            errores.push(`Cantidad inválida para el producto ${cod}`);
                            input.addClass('is-invalid');
                            input.attr('title', 'Debe ser un valor numérico mayor a cero');
                        } else {
                            input.removeClass('is-invalid');
                            input.removeAttr('title');
                        }
                    }
                    
                }
                
                const select = $(this).find('select');
                if (select.length > 0) {

                    valor = select.first().val();
                    if (select.attr('required') && (!valor || valor === '')) {
                        const cod = rowNode.find('#producto').text().trim() || 'Producto sin código';
                        errores.push(`Debe seleccionar una opción en el campo "${id}" para el producto ${cod}`);
                        select.addClass('is-invalid');
                        select.attr('title', 'Este campo es obligatorio');
                    } else {
                        select.removeClass('is-invalid');
                        select.removeAttr('title');
                    }

                } 

                if (select.length == 0  &&  input.length==0)  {
                    valor = $(this).text().trim();  
                }

                const limpio = valor.toString().replace(/\$/g, '')
                    .replace(/\s/g, '')
                    .replace(/\./g, '')
                    .replace(',', '.');

                if (/^[\d\.\-]+$/.test(limpio)) {
                    const num = parseFloat(limpio);
                    valor = isNaN(num) ? valor : num;
                }

                filaCompleta[id] = valor;
            });

            if (Object.keys(filaCompleta).length > 0) {
                todasFilas.push(filaCompleta);
            }
        });

        if (todasFilas.length === 0) {
            errores.push(`No se han seleccionado productos`);
        }

        this.productosSeleccionados = todasFilas;
        const response = errores.length === 0;
        return { productos: todasFilas, response, message: errores };

        }
